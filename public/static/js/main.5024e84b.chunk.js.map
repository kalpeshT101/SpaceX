{"version":3,"sources":["logo.png","components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","LaunchItem","launch","flight_number","mission_name","launch_date_local","launch_success","className","classNames","format","to","MissionKey","LAUNCHES_QUERY","gql","Launches","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch","this","props","match","params","parseInt","variables","launch_year","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","src","logo","alt","style","width","display","margin","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.5024e84b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.d166dd2c.png\";","import React from 'react';\r\nimport classNames from 'classnames';\r\nimport Moment from 'react-moment';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function LaunchItem({ launch: {flight_number, mission_name, launch_date_local, launch_success} }) {\r\n    return <div className=\"card card-body mb-3\">\r\n        <div className=\"row\">\r\n            <div className=\"col-md-9\">\r\n                <h4>Mission: <span className={classNames({\r\n                    'text-success': launch_success,\r\n                    'text-danger': !launch_success\r\n                })}> { mission_name }</span> </h4>\r\n                <p>Date: <Moment format=\"YYYY-MM-DD HH:mm\">{ launch_date_local }</Moment></p>\r\n            </div>\r\n            <div className=\"col-md-3\">\r\n                <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import React from 'react'\r\n\r\nexport default function MissionKey() {\r\n    return (\r\n        <div className=\"my-3\">\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-success\" /> = Success\r\n            </p>\r\n            <p>\r\n                <span className=\"px-3 mr-2 bg-danger\" /> = Fail\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport { Query } from 'react-apollo';\r\nimport LaunchItem from './LaunchItem';\r\nimport MissionKey from './MissionKey';\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n    query LaunchesQuery {\r\n        launches {\r\n            flight_number\r\n            mission_name\r\n            launch_date_local\r\n            launch_success\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launches extends Component {\r\n    render() {\r\n        return (\r\n            <Fragment>\r\n                <h1 className=\"display-4 my-3\">Launches</h1>\r\n                <MissionKey />\r\n                <Query query={LAUNCHES_QUERY}>\r\n                    {({ loading, error, data }) => {\r\n                        if(loading) return <h4>Loading..</h4>\r\n                        if(error) console.log(error)\r\n                            \r\n                        return <Fragment>\r\n                            {\r\n                                data.launches.map(launch => (\r\n                                    <LaunchItem key={launch.flight_number} launch={launch} />\r\n                                ))\r\n                            }\r\n                        </Fragment>\r\n                    }}\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Launches;\r\n","import React, { Component, Fragment } from 'react';\r\nimport gql from 'graphql-tag';\r\nimport {Query} from 'react-apollo';\r\nimport {Link} from 'react-router-dom';\r\nimport classNames from 'classnames';\r\n\r\nconst LAUNCH_QUERY = gql`\r\n    query LaunchQuery($flight_number: Int!) {\r\n        launch(flight_number: $flight_number) {\r\n            flight_number\r\n            mission_name\r\n            launch_year\r\n            launch_success\r\n            launch_date_local\r\n            rocket {\r\n                rocket_id\r\n                rocket_name\r\n                rocket_type\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport class Launch extends Component {\r\n    render() {\r\n        let {flight_number} = this.props.match.params;\r\n        flight_number = parseInt(flight_number);\r\n        return (\r\n            <Fragment>\r\n                <Query query={LAUNCH_QUERY} variables={{flight_number}}>\r\n                    {\r\n                        ({loading, error, data}) => {\r\n                            if(loading) return <h4>Loading..</h4>\r\n                            if(error) console.log(error)\r\n                            \r\n                            const { flight_number,\r\n                                    mission_name,\r\n                                    launch_year,\r\n                                    launch_success,\r\n                                    launch_date_local,\r\n                                    rocket: {rocket_id,                         \r\n                                            rocket_name,\r\n                                            rocket_type\r\n                                    }} = data.launch;\r\n\r\n                            return <div>\r\n                                <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission:</span>{mission_name}</h1>\r\n                                <h4 className=\"mb-3\">Launch Details</h4>\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Flight Number: {flight_number}</li>\r\n                                    <li className=\"list-group-item\">Launch Year: {launch_year}</li>\r\n                                    <li className=\"list-group-item\">Launch Successful: <span className={classNames({\r\n                                        'text-success': launch_success,\r\n                                        'text-danger': !launch_success\r\n                                    })}>{launch_success ? 'Yes': 'No'}</span></li>\r\n                                </ul>\r\n                                <h4 className=\"my-3\">Rocket Details</h4>\r\n                                <ul className=\"list-group\">\r\n                                    <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\r\n                                    <li className=\"list-group-item\">Rocket Name: {rocket_name}</li>\r\n                                    <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\r\n                                </ul>\r\n                                <hr/>\r\n                                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\r\n                            </div>\r\n                        }\r\n                    }\r\n                </Query>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Launch;\r\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport logo from './logo.png';\nimport Launches from './components/Launches';\nimport Launch from './components/Launch';\n\nconst client = new ApolloClient({\n  uri:'/graphql'\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n            <img src={logo} alt=\"SpaceX\" style= {{width:300, display:\"block\", margin: \"auto\"}}/>\n            <Route exact path='/' component={Launches}/>\n            <Route exact path='/Launch/:flight_number' component={Launch}/>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}